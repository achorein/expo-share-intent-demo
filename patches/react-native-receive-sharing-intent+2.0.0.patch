diff --git a/node_modules/react-native-receive-sharing-intent/android/build.gradle b/node_modules/react-native-receive-sharing-intent/android/build.gradle
index 02cc8f2..2726157 100644
--- a/node_modules/react-native-receive-sharing-intent/android/build.gradle
+++ b/node_modules/react-native-receive-sharing-intent/android/build.gradle
@@ -8,7 +8,7 @@ buildscript {
   }
 
   dependencies {
-    classpath 'com.android.tools.build:gradle:3.2.1'
+    classpath 'com.android.tools.build:gradle:7.4.1'
     // noinspection DifferentKotlinGradleVersion
     classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
   }
@@ -26,6 +26,7 @@ def getExtOrIntegerDefault(name) {
 }
 
 android {
+  namespace "com.reactnativereceivesharingintent"
   compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
   buildToolsVersion getExtOrDefault('buildToolsVersion')
   defaultConfig {
@@ -33,7 +34,6 @@ android {
     targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
     versionCode 1
     versionName "1.0"
-    
   }
   
   buildTypes {
@@ -45,8 +45,8 @@ android {
     disable 'GradleCompatible'
   }
   compileOptions {
-    sourceCompatibility JavaVersion.VERSION_1_8
-    targetCompatibility JavaVersion.VERSION_1_8
+    sourceCompatibility JavaVersion.VERSION_17
+    targetCompatibility JavaVersion.VERSION_17
   }
 }
 
diff --git a/node_modules/react-native-receive-sharing-intent/android/gradle.properties b/node_modules/react-native-receive-sharing-intent/android/gradle.properties
index 9303aa4..2ff63dd 100644
--- a/node_modules/react-native-receive-sharing-intent/android/gradle.properties
+++ b/node_modules/react-native-receive-sharing-intent/android/gradle.properties
@@ -1,4 +1,5 @@
-ReceiveSharingIntent_kotlinVersion=1.3.50
-ReceiveSharingIntent_compileSdkVersion=29
-ReceiveSharingIntent_buildToolsVersion=29.0.2
-ReceiveSharingIntent_targetSdkVersion=29
+ReceiveSharingIntent_kotlinVersion=1.8.10
+ReceiveSharingIntent_compileSdkVersion=34
+ReceiveSharingIntent_buildToolsVersion=34.0.0
+ReceiveSharingIntent_targetSdkVersion=34
+android.useAndroidX=true
diff --git a/node_modules/react-native-receive-sharing-intent/android/src/main/AndroidManifest.xml b/node_modules/react-native-receive-sharing-intent/android/src/main/AndroidManifest.xml
index d19929a..0a0938a 100644
--- a/node_modules/react-native-receive-sharing-intent/android/src/main/AndroidManifest.xml
+++ b/node_modules/react-native-receive-sharing-intent/android/src/main/AndroidManifest.xml
@@ -1,4 +1,3 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.reactnativereceivesharingintent">
+<manifest xmlns:android="http://schemas.android.com/apk/res/android">
 
 </manifest>
index 02cc8f2..b891660 100644
--- a/node_modules/react-native-receive-sharing-intent/android/build.gradle
+++ b/node_modules/react-native-receive-sharing-intent/android/build.gradle
@@ -29,7 +29,7 @@ android {
   compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
   buildToolsVersion getExtOrDefault('buildToolsVersion')
   defaultConfig {
-    minSdkVersion 16
+    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
     targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
     versionCode 1
     versionName "1.0"
diff --git a/node_modules/react-native-receive-sharing-intent/android/src/main/java/com/reactnativereceivesharingintent/ReceiveSharingIntentHelper.java b/node_modules/react-native-receive-sharing-intent/android/src/main/java/com/reactnativereceivesharingintent/ReceiveSharingIntentHelper.java
index 69126eb..6ecf9b4 100644
--- a/node_modules/react-native-receive-sharing-intent/android/src/main/java/com/reactnativereceivesharingintent/ReceiveSharingIntentHelper.java
+++ b/node_modules/react-native-receive-sharing-intent/android/src/main/java/com/reactnativereceivesharingintent/ReceiveSharingIntentHelper.java
@@ -26,83 +26,92 @@ public class ReceiveSharingIntentHelper {
     this.context = context;
   }
 
-  @RequiresApi(api = Build.VERSION_CODES.KITKAT)
-  public void sendFileNames(Context context, Intent intent, Promise promise){
-    try {
-      String action = intent.getAction();
-      String type = intent.getType();
-      if(type == null) { return; }
-      if(!type.startsWith("text") && (Objects.equals(action, Intent.ACTION_SEND) || Objects.equals(action, Intent.ACTION_SEND_MULTIPLE))){
+@RequiresApi(api = Build.VERSION_CODES.KITKAT)
+public void sendFileNames(Context context, Intent intent, Promise promise){
+  try {
+    String action = intent.getAction();
+    String type = intent.getType();
+    if(type == null) { 
+      promise.resolve(null);
+      return;
+    }
+    if(!type.startsWith("text") && (Objects.equals(action, Intent.ACTION_SEND) || Objects.equals(action, Intent.ACTION_SEND_MULTIPLE))){
+      WritableMap files = getMediaUris(intent,context);
+      if(files == null) {
+        promise.reject("error", "Files is null");
+        return;
+      }
+      promise.resolve(files);
+    }else if(type.startsWith("text") && Objects.equals(action, Intent.ACTION_SEND)){
+      String text = null;
+      String subject = null;
+      try{
+        text = intent.getStringExtra(Intent.EXTRA_TEXT);
+        subject = intent.getStringExtra(Intent.EXTRA_SUBJECT);
+      }catch (Exception ignored){ }
+      if(text == null){
         WritableMap files = getMediaUris(intent,context);
-        if(files == null) return;
-        promise.resolve(files);
-      }else if(type.startsWith("text") && Objects.equals(action, Intent.ACTION_SEND)){
-        String text = null;
-        String subject = null;
-        try{
-          text = intent.getStringExtra(Intent.EXTRA_TEXT);
-          subject = intent.getStringExtra(Intent.EXTRA_SUBJECT);
-        }catch (Exception ignored){ }
-        if(text == null){
-          WritableMap files = getMediaUris(intent,context);
-          if(files == null) return;
-          promise.resolve(files);
-        }else{
-          WritableMap files = new WritableNativeMap();
-          WritableMap file = new WritableNativeMap();
-          file.putString("contentUri",null);
-          file.putString("filePath", null);
-          file.putString("fileName", null);
-          file.putString("extension", null);
-          if(text.startsWith("http")){
-            file.putString("weblink", text);
-            file.putString("text",null);
-          }else{
-            file.putString("weblink", null);
-            file.putString("text",text);
-          }
-          file.putString("subject", subject);
-          files.putMap("0",file);
-          promise.resolve(files);
+        if(files == null) {
+          promise.reject("error", "Files is null");
+          return;
         }
-
-      }else if(Objects.equals(action, Intent.ACTION_VIEW)){
-        String link = intent.getDataString();
+        promise.resolve(files);
+      }else{
         WritableMap files = new WritableNativeMap();
         WritableMap file = new WritableNativeMap();
         file.putString("contentUri",null);
         file.putString("filePath", null);
-        file.putString("mimeType",null);
-        file.putString("text",null);
-        file.putString("weblink", link);
         file.putString("fileName", null);
         file.putString("extension", null);
+        if(text.startsWith("http")){
+          file.putString("weblink", text);
+          file.putString("text",null);
+        }else{
+          file.putString("weblink", null);
+          file.putString("text",text);
+        }
+        file.putString("subject", subject);
         files.putMap("0",file);
         promise.resolve(files);
       }
-      else if (Objects.equals(action, "android.intent.action.PROCESS_TEXT")) {
-        String text = null;
-        try {
-          text = intent.getStringExtra(intent.EXTRA_PROCESS_TEXT);
-        } catch (Exception e) {
-        }
-          WritableMap files = new WritableNativeMap();
-          WritableMap file = new WritableNativeMap();
-          file.putString("contentUri", null);
-          file.putString("filePath", null);
-          file.putString("fileName", null);
-          file.putString("extension", null);
-          file.putString("weblink", null);
-          file.putString("text", text);
-          files.putMap("0", file);
-          promise.resolve(files);
-      }else{
-        promise.reject("error","Invalid file type.");
+
+    }else if(Objects.equals(action, Intent.ACTION_VIEW)){
+      String link = intent.getDataString();
+      WritableMap files = new WritableNativeMap();
+      WritableMap file = new WritableNativeMap();
+      file.putString("contentUri",null);
+      file.putString("filePath", null);
+      file.putString("mimeType",null);
+      file.putString("text",null);
+      file.putString("weblink", link);
+      file.putString("fileName", null);
+      file.putString("extension", null);
+      files.putMap("0",file);
+      promise.resolve(files);
+    }
+    else if (Objects.equals(action, "android.intent.action.PROCESS_TEXT")) {
+      String text = null;
+      try {
+        text = intent.getStringExtra(intent.EXTRA_PROCESS_TEXT);
+      } catch (Exception e) {
       }
-    }catch (Exception e){
-      promise.reject("error",e.toString());
+      WritableMap files = new WritableNativeMap();
+      WritableMap file = new WritableNativeMap();
+      file.putString("contentUri", null);
+      file.putString("filePath", null);
+      file.putString("fileName", null);
+      file.putString("extension", null);
+      file.putString("weblink", null);
+      file.putString("text", text);
+      files.putMap("0", file);
+      promise.resolve(files);
+    }else{
+      promise.reject("error","Invalid file type.");
     }
-  };
+  }catch (Exception e){
+    promise.reject("error",e.toString());
+  }
+};
 
 
   @RequiresApi(api = Build.VERSION_CODES.KITKAT)
diff --git a/node_modules/react-native-receive-sharing-intent/android/src/main/java/com/reactnativereceivesharingintent/ReceiveSharingIntentModule.java b/node_modules/react-native-receive-sharing-intent/android/src/main/java/com/reactnativereceivesharingintent/ReceiveSharingIntentModule.java
index f752144..f0bd892 100644
--- a/node_modules/react-native-receive-sharing-intent/android/src/main/java/com/reactnativereceivesharingintent/ReceiveSharingIntentModule.java
+++ b/node_modules/react-native-receive-sharing-intent/android/src/main/java/com/reactnativereceivesharingintent/ReceiveSharingIntentModule.java
@@ -18,6 +18,7 @@ public class ReceiveSharingIntentModule extends ReactContextBaseJavaModule {
 
   private final ReactApplicationContext reactContext;
   private ReceiveSharingIntentHelper receiveSharingIntentHelper;
+  private Intent oldIntent;
 
   public ReceiveSharingIntentModule(ReactApplicationContext reactContext) {
     super(reactContext);
@@ -30,18 +31,24 @@ public class ReceiveSharingIntentModule extends ReactContextBaseJavaModule {
   protected void onNewIntent(Intent intent) {
     Activity mActivity = getCurrentActivity();
     if(mActivity == null) { return; }
+    oldIntent = mActivity.getIntent();
     mActivity.setIntent(intent);
   }
 
   @RequiresApi(api = Build.VERSION_CODES.KITKAT)
-  @ReactMethod
-  public void getFileNames(Promise promise){
-    Activity mActivity = getCurrentActivity();
-    if(mActivity == null) { return; }
-    Intent intent = mActivity.getIntent();
-    receiveSharingIntentHelper.sendFileNames(reactContext, intent, promise);
-    mActivity.setIntent(null);
+@ReactMethod
+public void getFileNames(Promise promise) {
+  Activity mActivity = getCurrentActivity();
+  if (mActivity == null) {
+    promise.reject("ACTIVITY_NULL", "Activity is null");
+    return;
+  }
+  Intent intent = mActivity.getIntent();
+  receiveSharingIntentHelper.sendFileNames(reactContext, intent, promise);
+  if (oldIntent != null) {
+    mActivity.setIntent(oldIntent);
   }
+}
 
   @ReactMethod
   public void clearFileNames(){
diff --git a/node_modules/react-native-receive-sharing-intent/src/ReceiveSharingIntent.ts b/node_modules/react-native-receive-sharing-intent/src/ReceiveSharingIntent.ts
index 735c191..8415a3a 100644
--- a/node_modules/react-native-receive-sharing-intent/src/ReceiveSharingIntent.ts
+++ b/node_modules/react-native-receive-sharing-intent/src/ReceiveSharingIntent.ts
@@ -33,18 +33,20 @@ class ReceiveSharingIntentModule implements IReceiveSharingIntent {
     }
 
     clearReceivedFiles(){
-        this.isClear = true;
+        ReceiveSharingIntent.clearFileNames();
     }
 
     
    protected getFileNames(handler: Function, errorHandler: Function, url: string){
         if(this.isIos){
             ReceiveSharingIntent.getFileNames(url).then((data: any)=>{         
+                 if (!data) { handler([]); return; }
                  let files = this.utils.sortData(data);
                  handler(files);
             }).catch((e:any)=>errorHandler(e));
         }else{
             ReceiveSharingIntent.getFileNames().then((fileObject: any) => {
+                if (!fileObject) { handler([]); return; }
                 let files = Object.keys(fileObject).map((k) => fileObject[k])
                 handler(files);
             }).catch((e:any)=>errorHandler(e));
